[{"name":"app.R","content":"### Interpolation App\r\n\r\n\r\nlibrary(shiny)\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Linear Interpolation and Quantile Calculation\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      fileInput(\"file\", \"Upload CSV File\", accept = \".csv\"),\r\n      uiOutput(\"xvar_ui\"),\r\n      uiOutput(\"yvar_ui\"),\r\n      numericInput(\"min_x\", \"Min X (default is dataset minimum)\", value = NULL),\r\n      numericInput(\"max_x\", \"Max X (default is dataset maximum)\", value = NULL),\r\n      numericInput(\"step_x\", \"Step Size (i.e., time-step; default is dataset average)\", value = NULL),\r\n      numericInput(\"quantile\", \"Quantile (0 to 1; 0.5 is the median)\", value = 0.5, min = 0, max = 1, step = 0.01),\r\n      downloadButton(\"downloadData\", \"Download Interpolated Data\")\r\n    ),\r\n    mainPanel(\r\n      plotOutput(\"plot\"),\r\n      textOutput(\"quantile_value\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  data <- reactive({\r\n    req(input$file)\r\n    read.csv(input$file$datapath)\r\n  })\r\n  \r\n  observe({\r\n    req(data(), input$xvar, input$yvar)\r\n    updateNumericInput(session, \"min_x\", value = min(data()[[input$xvar]], na.rm = TRUE))\r\n    updateNumericInput(session, \"max_x\", value = max(data()[[input$xvar]], na.rm = TRUE))\r\n    updateNumericInput(session, \"step_x\", value = mean(diff(sort(data()[[input$xvar]])), na.rm = TRUE))\r\n  })\r\n  \r\n  output$xvar_ui <- renderUI({\r\n    req(data())\r\n    selectInput(\"xvar\", \"X Variable\", choices = names(data()))\r\n  })\r\n  \r\n  output$yvar_ui <- renderUI({\r\n    req(data())\r\n    selectInput(\"yvar\", \"Y Variable\", choices = names(data()))\r\n  })\r\n  \r\n  interpolated_data <- reactive({\r\n    req(data(), input$xvar, input$yvar, input$min_x, input$max_x, input$step_x)\r\n    x <- data()[[input$xvar]]\r\n    y <- data()[[input$yvar]]\r\n    xout <- seq(input$min_x, input$max_x, by = input$step_x)\r\n    yout <- approx(x, y, xout = xout)$y\r\n    data.frame(x = xout, y = yout)\r\n  })\r\n  \r\n  output$plot <- renderPlot({\r\n    req(interpolated_data())\r\n    plot(data()[[input$xvar]], data()[[input$yvar]], pch = 1, col = \"blue\", main = \"Interpolated Data with Quantile Line\")\r\n    lines(interpolated_data()$x, interpolated_data()$y, col = \"black\", lwd = 2)\r\n    abline(h = quantile(interpolated_data()$y, probs = input$quantile), col = \"red\", lty = 2)\r\n  })\r\n  \r\n  output$quantile_value <- renderText({\r\n    req(interpolated_data())\r\n    quantile_value <- quantile(interpolated_data()$y, probs = input$quantile)\r\n    paste(\"Y value at quantile\", input$quantile, \":\", quantile_value)\r\n  })\r\n  \r\n  output$downloadData <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"interpolated_data\", Sys.Date(), \".csv\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(interpolated_data(), file, row.names = FALSE)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui, server)\r\n\r\n","type":"text"}]
